name: Deploy to Testing Environments

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]
    types: [ closed ]

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      functions-changed: ${{ steps.changes.outputs.functions }}
      users-function: ${{ steps.changes.outputs.users-function }}
      animals-function: ${{ steps.changes.outputs.animals-function }}
      plugins-function: ${{ steps.changes.outputs.plugins-function }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            functions:
              - 'UsersFunction/**'
              - 'AnimalsFunction/**'
              - 'PlugginsRandomFunctionOne/**'
            users-function:
              - 'UsersFunction/**'
            animals-function:
              - 'AnimalsFunction/**'
            plugins-function:
              - 'PlugginsRandomFunctionOne/**'

  build-and-deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.functions-changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function-type: [
          { name: 'users', path: 'UsersFunction', changed: '${{ needs.detect-changes.outputs.users-function }}' },
          { name: 'animals', path: 'AnimalsFunction', changed: '${{ needs.detect-changes.outputs.animals-function }}' },
          { name: 'plugins', path: 'PlugginsRandomFunctionOne', changed: '${{ needs.detect-changes.outputs.plugins-function }}' }
        ]
    steps:
      - name: Checkout code
        if: matrix.function-type.changed == 'true'
        uses: actions/checkout@v4

      - name: Setup .NET
        if: matrix.function-type.changed == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Azure Login via OIDC
        if: matrix.function-type.changed == 'true'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure CLI Bicep extension
        if: matrix.function-type.changed == 'true'
        run: az bicep install

      - name: Build Function App
        if: matrix.function-type.changed == 'true'
        run: |
          cd ${{ matrix.function-type.path }}/${{ matrix.function-type.path }}
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./publish

      - name: Create deployment package
        if: matrix.function-type.changed == 'true'
        run: |
          cd ${{ matrix.function-type.path }}/${{ matrix.function-type.path }}/publish
          zip -r ../../../deploy-package-${{ matrix.function-type.name }}.zip .

      - name: Get testing environments
        if: matrix.function-type.changed == 'true'
        id: get-environments
        run: |
          # Read configuration and extract testing environments
          environments=$(cat config/clients.json | jq -r '
            .clients | to_entries[] | 
            select(.value.environments.testing.functions.core[] == "functionUsuarios" or 
                   .value.environments.testing.functions.core[] == "functionAnimales" or
                   .value.environments.testing.functions.plugins[] == "functionRandomUsuario") |
            .key
          ' | jq -R -s -c 'split("\n")[:-1]')
          echo "environments=$environments" >> $GITHUB_OUTPUT

      - name: Deploy to testing environments
        if: matrix.function-type.changed == 'true'
        run: |
          environments='${{ steps.get-environments.outputs.environments }}'
          
          for client in $(echo $environments | jq -r '.[]'); do
            echo "Deploying to $client-testing environment..."
            
            # Determine function name based on type
            case "${{ matrix.function-type.name }}" in
              "users")
                function_name="functionUsuarios"
                ;;
              "animals")
                function_name="functionAnimales"
                ;;
              "plugins")
                function_name="functionRandomUsuario"
                ;;
            esac
            
            # Check if this client uses this function
            has_function=$(cat config/clients.json | jq -r "
              .clients.$client.environments.testing.functions.core[] == \"$function_name\" or
              .clients.$client.environments.testing.functions.plugins[] == \"$function_name\"
            " | grep -q true && echo "true" || echo "false")
            
            if [ "$has_function" = "true" ]; then
              # Get function app name
              function_app_name="${function_name}-${client}-testing"
              
              echo "Deploying to Function App: $function_app_name"
              
              # Deploy using Azure CLI
              az functionapp deployment source config-zip \
                --resource-group "rg-witag-${client}-testing" \
                --name "$function_app_name" \
                --src "deploy-package-${{ matrix.function-type.name }}.zip" \
                --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}"
              
              if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully deployed to $function_app_name"
              else
                echo "‚ùå Failed to deploy to $function_app_name"
                exit 1
              fi
            else
              echo "‚è≠Ô∏è  Skipping $client - does not use $function_name"
            fi
          done

      - name: Verify deployments
        if: matrix.function-type.changed == 'true'
        run: |
          environments='${{ steps.get-environments.outputs.environments }}'
          
          for client in $(echo $environments | jq -r '.[]'); do
            # Determine function name based on type
            case "${{ matrix.function-type.name }}" in
              "users")
                function_name="functionUsuarios"
                ;;
              "animals")
                function_name="functionAnimales"
                ;;
              "plugins")
                function_name="functionRandomUsuario"
                ;;
            esac
            
            # Check if this client uses this function
            has_function=$(cat config/clients.json | jq -r "
              .clients.$client.environments.testing.functions.core[] == \"$function_name\" or
              .clients.$client.environments.testing.functions.plugins[] == \"$function_name\"
            " | grep -q true && echo "true" || echo "false")
            
            if [ "$has_function" = "true" ]; then
              function_app_name="${function_name}-${client}-testing"
              
              echo "Verifying deployment for $function_app_name..."
              
              # Check if function app is running
              status=$(az functionapp show \
                --resource-group "rg-witag-${client}-testing" \
                --name "$function_app_name" \
                --query "state" \
                --output tsv \
                --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}")
              
              if [ "$status" = "Running" ]; then
                echo "‚úÖ $function_app_name is running successfully"
              else
                echo "‚ö†Ô∏è  $function_app_name status: $status"
              fi
            fi
          done

  notify-completion:
    needs: [detect-changes, build-and-deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-deploy.result }}" = "success" ]; then
            echo "üéâ All testing environments deployed successfully!"
          elif [ "${{ needs.build-and-deploy.result }}" = "failure" ]; then
            echo "‚ùå Deployment to testing environments failed!"
            exit 1
          elif [ "${{ needs.build-and-deploy.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è  No function changes detected, skipping deployment"
          fi 