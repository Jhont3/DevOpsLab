name: 'Deploy Infrastructure with Database Initialization'

on:
  push:
    branches:
      - main
      - testing
    paths:
      - 'infrastructure/**'
      - 'config/**'
      - 'scripts/**'
      - '.github/workflows/deploy-infrastructure-with-data.yml'
  pull_request:
    branches:
      - main
      - testing
    paths:
      - 'infrastructure/**'
      - 'config/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      client_name:
        description: 'Client name (elite, jarandes)'
        required: true
        type: choice
        options:
          - elite
          - jarandes
        default: 'elite'
      environment:
        description: 'Environment (testing, main)'
        required: true
        type: choice
        options:
          - testing
          - main
        default: 'testing'
      initialize_database:
        description: 'Initialize database with sample data'
        required: false
        type: boolean
        default: true

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  # Job para determinar la configuración basada en el branch/input
  setup:
    runs-on: ubuntu-latest
    outputs:
      client_name: ${{ steps.config.outputs.client_name }}
      environment: ${{ steps.config.outputs.environment }}
      matrix: ${{ steps.config.outputs.matrix }}
      initialize_db: ${{ steps.config.outputs.initialize_db }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine deployment configuration
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CLIENT_NAME="${{ github.event.inputs.client_name }}"
            ENVIRONMENT="${{ github.event.inputs.environment }}"
            INITIALIZE_DB="${{ github.event.inputs.initialize_database }}"
          else
            # Configuración automática basada en el branch
            if [ "${{ github.ref_name }}" = "main" ]; then
              ENVIRONMENT="main"
            else
              ENVIRONMENT="testing"
            fi
            CLIENT_NAME="elite"  # Default para pushes automáticos
            INITIALIZE_DB="true"
          fi
          
          echo "client_name=$CLIENT_NAME" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "initialize_db=$INITIALIZE_DB" >> $GITHUB_OUTPUT
          
          # Matrix para deployment multiple si es necesario
          echo "matrix={\"include\":[{\"client\":\"$CLIENT_NAME\",\"environment\":\"$ENVIRONMENT\"}]}" >> $GITHUB_OUTPUT

  # Job de validación y linting
  validate:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Lint Bicep files
        run: |
          echo "🔍 Running Bicep linter..."
          az bicep build --file infrastructure/bicep/main.bicep

      - name: Validate Bicep template
        run: |
          echo "✅ Validating Bicep template..."
          CLIENT_NAME="${{ needs.setup.outputs.client_name }}"
          ENVIRONMENT="${{ needs.setup.outputs.environment }}"
          
          # Read configuration
          RESOURCE_GROUP=$(jq -r ".clients.$CLIENT_NAME.environments.$ENVIRONMENT.resourceGroup" config/clients.json)
          LOCATION=$(jq -r ".clients.$CLIENT_NAME.environments.$ENVIRONMENT.location" config/clients.json)
          
          # Validate deployment (dry-run)
          az deployment group validate \
            --resource-group $RESOURCE_GROUP \
            --template-file infrastructure/bicep/main.bicep \
            --parameters clientName=$CLIENT_NAME environmentName=$ENVIRONMENT \
            --location "$LOCATION" \
            --no-prompt
        continue-on-error: false

  # Job de preview con what-if
  preview:
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Preview changes with what-if
        run: |
          echo "🔮 Running what-if analysis..."
          CLIENT_NAME="${{ needs.setup.outputs.client_name }}"
          ENVIRONMENT="${{ needs.setup.outputs.environment }}"
          
          # Read configuration
          RESOURCE_GROUP=$(jq -r ".clients.$CLIENT_NAME.environments.$ENVIRONMENT.resourceGroup" config/clients.json)
          LOCATION=$(jq -r ".clients.$CLIENT_NAME.environments.$ENVIRONMENT.location" config/clients.json)
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP --location "$LOCATION"
          
          # Run what-if
          az deployment group what-if \
            --resource-group $RESOURCE_GROUP \
            --template-file infrastructure/bicep/main.bicep \
            --parameters clientName=$CLIENT_NAME environmentName=$ENVIRONMENT \
            --no-prompt

  # Job principal de deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, validate]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/testing' || github.event_name == 'workflow_dispatch'
    environment: 
      name: ${{ needs.setup.outputs.environment }}
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup PowerShell
        shell: pwsh
        run: |
          # Install required PowerShell modules
          Install-Module -Name Az.Accounts -Force -AllowClobber
          Install-Module -Name Az.CosmosDB -Force -AllowClobber
          Install-Module -Name Az.Resources -Force -AllowClobber

      - name: Deploy Infrastructure
        shell: pwsh
        run: |
          echo "🚀 Deploying infrastructure..."
          $CLIENT_NAME = "${{ matrix.client }}"
          $ENVIRONMENT = "${{ matrix.environment }}"
          
          # Execute deployment script
          ./scripts/Deploy-Environment.ps1 -ClientName $CLIENT_NAME -Environment $ENVIRONMENT -SubscriptionId $env:AZURE_SUBSCRIPTION_ID -ConfigFile "config/clients.json"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Wait for resources to be ready
        if: needs.setup.outputs.initialize_db == 'true'
        run: |
          echo "⏳ Waiting for resources to be fully ready..."
          sleep 60

      - name: Initialize Database
        if: needs.setup.outputs.initialize_db == 'true'
        shell: pwsh
        run: |
          echo "🗃️ Initializing database with sample data..."
          $CLIENT_NAME = "${{ matrix.client }}"
          $ENVIRONMENT = "${{ matrix.environment }}"
          
          # Execute database initialization script
          ./scripts/Initialize-Database.ps1 -ClientName $CLIENT_NAME -Environment $ENVIRONMENT -ConfigPath "config/clients.json"

      - name: Deployment Summary
        shell: pwsh
        run: |
          echo "✅ Deployment completed successfully!"
          echo "📋 Summary:"
          echo "   Client: ${{ matrix.client }}"
          echo "   Environment: ${{ matrix.environment }}"
          echo "   Database Initialized: ${{ needs.setup.outputs.initialize_db }}"
          
          if ("${{ needs.setup.outputs.initialize_db }}" -eq "true") {
            echo "📊 Sample data inserted:"
            echo "   - usuarios: usuario1, usuario2, usuario3"
            echo "   - animales: perro, gato, ratón"
          }

  # Job de testing post-deployment
  test:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.initialize_db == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Resources
        shell: pwsh
        run: |
          echo "🔍 Verifying deployed resources..."
          $CLIENT_NAME = "${{ needs.setup.outputs.client_name }}"
          $ENVIRONMENT = "${{ needs.setup.outputs.environment }}"
          
          # Read configuration
          $config = Get-Content "config/clients.json" | ConvertFrom-Json
          $clientConfig = $config.clients.$CLIENT_NAME.environments.$ENVIRONMENT
          
          $resourceGroup = $clientConfig.resourceGroup
          $cosmosAccount = $clientConfig.cosmosDb.accountName
          
          # Check if resource group exists
          $rg = az group show --name $resourceGroup --query "name" -o tsv 2>/dev/null
          if ($rg) {
            echo "✅ Resource Group: $resourceGroup exists"
          } else {
            echo "❌ Resource Group: $resourceGroup not found"
            exit 1
          }
          
          # Check if Cosmos DB exists
          $cosmos = az cosmosdb show --name $cosmosAccount --resource-group $resourceGroup --query "name" -o tsv 2>/dev/null
          if ($cosmos) {
            echo "✅ Cosmos DB: $cosmosAccount exists"
          } else {
            echo "❌ Cosmos DB: $cosmosAccount not found"
            exit 1
          }
          
          echo "🎉 All resources verified successfully!" 