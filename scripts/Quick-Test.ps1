#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Quick validation script to verify OIDC setup and Azure configuration

.DESCRIPTION
    This script validates the OIDC configuration and Azure connection without deploying
    resources. It's designed for quick validation before running full deployments.
    
    Configuration priority (highest to lowest):
    1. Command line parameters
    2. local.settings.json file
    3. Default values in Config.ps1

.PARAMETER ApplicationId
    Azure Application ID for OIDC (optional: uses local.settings.json or defaults)
    
.PARAMETER SubscriptionId  
    Azure Subscription ID (optional: uses local.settings.json or defaults)
    
.PARAMETER ClientName
    Client to test (optional: defaults to "elite")

.EXAMPLE
    .\Quick-Test.ps1
    # Uses defaults or local.settings.json
    
.EXAMPLE
    .\Quick-Test.ps1 -ClientName "jarandes"
    # Test with jarandes client
    
.EXAMPLE
    .\Quick-Test.ps1 -ApplicationId "your-app-id" -SubscriptionId "your-sub-id"
    # Override with specific values
#>

param(
    [Parameter(Mandatory = $false)]
    [string]$ApplicationId,
    
    [Parameter(Mandatory = $false)]
    [string]$SubscriptionId,
    
    [Parameter(Mandatory = $false)]
    [string]$ClientName
)

# Load configuration
. "$PSScriptRoot/Config.ps1"

# Load local settings if exists (like Azure Functions)
if (Test-Path "local.settings.json") {
    Write-Host "Loading local.settings.json..." -ForegroundColor Yellow
    $localSettings = Get-Content "local.settings.json" -Raw | ConvertFrom-Json
    if ($localSettings.Values) {
        if (-not $ApplicationId) { $ApplicationId = $localSettings.Values.AZURE_CLIENT_ID }
        if (-not $SubscriptionId) { $SubscriptionId = $localSettings.Values.AZURE_SUBSCRIPTION_ID }
    }
}

# Set defaults from configuration if not provided
if (-not $ApplicationId) { $ApplicationId = (Get-ConfigValue "Azure" "ClientId") }
if (-not $SubscriptionId) { $SubscriptionId = (Get-ConfigValue "Azure" "SubscriptionId") }
if (-not $ClientName) { $ClientName = (Get-ConfigValue "Project" "DefaultClient") }

# Validate required parameters
if (-not $ApplicationId) {
    throw "‚ùå APPLICATION_ID no est√° configurado. Verificar local.settings.json o par√°metros."
}
if (-not $SubscriptionId) {
    throw "‚ùå SUBSCRIPTION_ID no est√° configurado. Verificar local.settings.json o par√°metros."
}

# Debug output
Write-Host "üîß Configuraci√≥n cargada:" -ForegroundColor Cyan
Write-Host "   ApplicationId: $($ApplicationId.Substring(0,8))..." -ForegroundColor Gray
Write-Host "   SubscriptionId: $($SubscriptionId.Substring(0,8))..." -ForegroundColor Gray
Write-Host "   ClientName: $ClientName" -ForegroundColor Gray

# Set error action preference
$ErrorActionPreference = "Stop"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

try {
    Write-ColorOutput "=== Quick Test: OIDC and Elite Testing Environment ===" "Blue"
    
    # 1. Verify OIDC Configuration
    Write-ColorOutput "`n1. Verificando configuraci√≥n OIDC..." "Yellow"
    
    Write-ColorOutput "   - Verificando aplicaci√≥n Azure AD..." "Cyan"
    $appName = az ad app show --id $ApplicationId --query "displayName" --output tsv
    if ($appName) {
        Write-ColorOutput "   ‚úÖ Aplicaci√≥n encontrada: $appName" "Green"
    } else {
        throw "‚ùå No se encontr√≥ la aplicaci√≥n con ID: $ApplicationId"
    }
    
    Write-ColorOutput "   - Verificando federation credentials..." "Cyan"
    $credentials = az ad app federated-credential list --id $ApplicationId --query "[].name" --output tsv
    if ($credentials) {
        Write-ColorOutput "   ‚úÖ Federation credentials configuradas:" "Green"
        $credentials -split "`n" | ForEach-Object { Write-ColorOutput "     - $_" "Gray" }
    } else {
        Write-ColorOutput "   ‚ö†Ô∏è  No se encontraron federation credentials" "Yellow"
    }
    
    Write-ColorOutput "   - Verificando role assignments..." "Cyan"
    $roles = az role assignment list --assignee $ApplicationId --query "[].roleDefinitionName" --output tsv
    if ($roles) {
        Write-ColorOutput "   ‚úÖ Roles asignados:" "Green"
        $roles -split "`n" | ForEach-Object { Write-ColorOutput "     - $_" "Gray" }
    } else {
        Write-ColorOutput "   ‚ö†Ô∏è  No se encontraron roles asignados" "Yellow"
    }
    
    # 2. Verify Configuration File
    Write-ColorOutput "`n2. Verificando configuraci√≥n de clientes..." "Yellow"
    
    if (Test-Path "../config/clients.json") {
        $config = Get-Content "../config/clients.json" -Raw | ConvertFrom-Json
        $clientCount = ($config.clients | Get-Member -MemberType NoteProperty).Count
        Write-ColorOutput "   ‚úÖ Archivo de configuraci√≥n encontrado" "Green"
        Write-ColorOutput "   ‚úÖ Clientes configurados: $clientCount" "Green"
        
        $config.clients | Get-Member -MemberType NoteProperty | ForEach-Object {
            Write-ColorOutput "     - $($_.Name)" "Gray"
        }
    } else {
        throw "‚ùå No se encontr√≥ ../config/clients.json"
    }
    
    # 3. Test Azure Connection
    Write-ColorOutput "`n3. Probando conexi√≥n a Azure..." "Yellow"
    
    Write-ColorOutput "   - Configurando suscripci√≥n..." "Cyan"
    az account set --subscription $SubscriptionId
    
    Write-ColorOutput "   - Verificando acceso a suscripci√≥n..." "Cyan"
    $accountInfo = az account show --output json | ConvertFrom-Json
    if ($accountInfo) {
        Write-ColorOutput "   ‚úÖ Conectado a: $($accountInfo.name)" "Green"
        Write-ColorOutput "   ‚úÖ Subscription ID: $($accountInfo.id)" "Green"
    } else {
        Write-ColorOutput "   ‚ùå No se pudo conectar a Azure" "Red"
    }
    
    # 4. Verify Resource Group (check if already exists)
    Write-ColorOutput "`n4. Verificando estado de recursos..." "Yellow"
    
    $resourceGroup = "rg-witag-$ClientName-testing"
    Write-ColorOutput "   - Verificando si existe: $resourceGroup" "Cyan"
    
    $rgExists = az group exists --name $resourceGroup --subscription $SubscriptionId
    if ($rgExists -eq "true") {
        Write-ColorOutput "   ‚úÖ Resource group YA existe" "Green"
        
        Write-ColorOutput "   - Listando recursos existentes..." "Cyan"
        $resources = az resource list --resource-group $resourceGroup --output table
        Write-ColorOutput $resources "Gray"
    } else {
        Write-ColorOutput "   ‚ÑπÔ∏è  Resource group no existe (se crear√° en deployment)" "Yellow"
        Write-ColorOutput "   üí° Para crear recursos, ejecuta:" "Cyan"
        Write-ColorOutput "      .\Deploy-Environment.ps1 -ClientName '$ClientName' -Environment 'testing' -SubscriptionId '$SubscriptionId'" "Gray"
    }
    
    # 5. Success Summary
    Write-ColorOutput "`nüéâ ¬°Validaci√≥n completada exitosamente!" "Green"
    Write-ColorOutput "   ‚úÖ OIDC configurado correctamente" "Green"
    Write-ColorOutput "   ‚úÖ Conexi√≥n a Azure verificada" "Green"
    Write-ColorOutput "   ‚úÖ Configuraci√≥n de $ClientName validada" "Green"
    Write-ColorOutput "   ‚úÖ Listo para deployment autom√°tico" "Green"
    
    Write-ColorOutput "`nüìã Valores para GitHub Secrets:" "Cyan"
    Write-ColorOutput "   AZURE_CLIENT_ID: $ApplicationId" "White"
    Write-ColorOutput "   AZURE_TENANT_ID: $(az account show --query tenantId --output tsv)" "White"
    Write-ColorOutput "   AZURE_SUBSCRIPTION_ID: $SubscriptionId" "White"
    
    Write-ColorOutput "`nüöÄ Pr√≥ximos pasos:" "Cyan"
    if ($rgExists -ne "true") {
        Write-ColorOutput "   1. Crear infraestructura:" "Yellow"
        Write-ColorOutput "      .\Deploy-Environment.ps1 -ClientName '$ClientName' -Environment 'testing' -SubscriptionId '$SubscriptionId'" "Gray"
        Write-ColorOutput "   2. Configurar GitHub Secrets (si no est√°n configurados)" "Yellow"
        Write-ColorOutput "   3. Hacer push a main para deployment autom√°tico" "Yellow"
    } else {
        Write-ColorOutput "   1. Configurar GitHub Secrets (si no est√°n configurados)" "Yellow"
        Write-ColorOutput "   2. Hacer push a main para deployment autom√°tico" "Yellow"
        Write-ColorOutput "   üí° La infraestructura ya existe - GitHub Actions actualizar√° autom√°ticamente" "Green"
    }
    
} catch {
    Write-ColorOutput "`n‚ùå Error en la prueba: $($_.Exception.Message)" "Red"
    Write-ColorOutput "Stack trace: $($_.ScriptStackTrace)" "Red"
    exit 1
} 